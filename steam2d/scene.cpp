//
//  scene.c
//  onsen
//
//  Created by Hiroyuki Sano on 9/20/15.
//  Copyright Â© 2015 Hiroyuki Sano. All rights reserved.
//

#include "scene.h"

#include <stdlib.h>

#define K					0.00 //Buoyancy Coefficient
#define G					0.0001			//Gravity Coefficient


perlin _perlin;
int frame=0;

void scene(){

	double **s = get_steam();
	double **v = get_vapor();
	double **t = get_temperature();

	for(int i = X * 0.3; i < X-X*0.3; i++){
		//srand(100);
		int j = 1;

		//double noise = _perlin.noise((double)i*0.1,(double)frame*0.01) * 10.0;
		double noise  = 1;
		noise = (noise < 0) ? 0 : noise;

		double pv = noise * 1.0;//(double)(rand()%20)/100.0;
		double pt = noise * 5.0;//(double)(rand()%100)/100.0;
		//t[i][j] + 0.10 * pt;
		//t[i][j] = 10.0 + 5.0 * pt;
		//printf("%f",pv);
		t[i][j] = A + pt;
		v[i][j] = pv;//v[i][j] +  pv;
	}


	START_FOR_C

	if ( j == 0 ) continue;

	//Saturation Vapor Content
	double a = 5.0;
	double b = 30;
	double c = -2.0;
	double m = MIN(a * exp(-b / ((t[i][j]) + c)),v[i][j]+s[i][j]);
	
	//double m = a * exp(-b/t[i][j]+c);


	//Amount of steam generated by the phase transition
	//double r = (double)(rand()%100)/100.0; //Phase transition ratio

	double r = 0.7;
	double ds = r * (v[i][j] - m);

	//Steam density
	s[i][j] += ds;
	v[i][j] -= ds;

	//latent heat
	t[i][j] += 0.01 * ds;


	double t_amb;
	t_amb = A;
	/*
	if(j == 1) {
		t_amb = (g_ref(t,i-1,j)+g_ref(t,i+1,j)+g_ref(t,i,j+1))/3.0;
	}else{
		t_amb = (g_ref(t,i-1,j)+g_ref(t,i+1,j)+g_ref(t,i,j-1)+g_ref(t,i,j+1))/4.0;
	}*/

	double buoy = K * ((t[i][j] - t_amb)) - G * s[i][j];

	//double buoy  = G * s[i][j];
	double noise_x = ((double)(rand()%100)/100.0-0.5) * 0.0;
	//double noise_x = 0;
	double noise_y = ((double)(rand()%100)/100.0-0.5) * 0.0;
	//double noise_y = 0;
	add_force(i,j,0+noise_x,buoy+noise_y);

	if(s[i][j]>0.0001){
	printf("i%d j%d ds%f s%f v%f m%f t%f buoy%f noise_x%f noise_y%f\n",i,j,ds,s[i][j],v[i][j],m,t[i][j],buoy,noise_x,noise_y);
	}

	END_FOR

	frame++;

}

//Smoke
/*
void scene(){
	
	double **s = get_steam();
	double **t = get_temperature();
	
	for(int i = X/3; i < X-X/3; i++){
		s[i][0] += 0.1;
		t[i][0] = 15;
	}
	
	//Compute Buoyancy
	double a = 0.001;
	double b = 0.002;
	START_FOR_C
	double buoy = -a * s[i][j] + b * (t[i][j]-A);
	add_force(i, j, 0 , buoy);
	END_FOR
}
*/
//Cloud
/* 
void scene(){

	double **s = get_steam();
	double **v = get_vapor();
	double **t = get_temperature();

	for(int i = X/3; i < X-X/3; i++){
		t[i][0] = t[i][0] + 0.01;
		v[i][0] = v[i][0] + 0.01;
	}

	START_FOR_C

	//Saturation Vapor Content
	double a = 8;
	double b = 30;
	double c = -0.8;
	double m = MAX(a * exp(-b / (t[i][j] + c)),v[i][j]+s[i][j]);

	//Amount of steam generated by the phase transition
	double r = 1.977; //Phase transition ratio
	double ds = r * (v[i][j] - m);

	//Temperature
	double q = 0.1;
	double p = 0.00;
	t[i][j] = t[i][j] + q * ds - p * (double)j/(double)Y;

	//Steam density
	s[i][j] += ds;
//	if(s[i][j] > 0){

	v[i][j] -= ds;

	double buoy = K * ((t[i][j]-A) / A) - G * s[i][j];
	add_force(i,j,0,buoy);
	if(s[i][j]>0.0001){
	printf("ds%f s%f t%f v%f m%f\n",ds,s[i][j],t[i][j],v[i][j],m);
	}
	END_FOR

}
*/